grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:

	(elements+=ExperimentOntology)*;
	
ExperimentOntology :
	ModelSection |Goals | Hypothesis | Experiment
;
	
ModelSection:
	'model' (modName = ID) 
	'{'
	(mechanisms += Mechanism)*
	((events += EventDescriptor)?)*
	(parameters += Factor)*
	'}'
;	

Mechanism:
	'mechanism' (mechanismName = ID) ' = ' (LHS = Reaction) (condition = GuardCondition)? ' -> ' (RHS = Reaction)
;

Reaction:
	(agent1 = ID) (' + ' )? (agent = ID)?
;



GuardCondition:
	gd = '[' (condition1= ID)? (link = LinkOperators)? (condition2 = ID)? ']'
;

LinkOperators:
	'+'|'-'|'*'|'/'|'%'|' = '|' == '|'&&'|'||'|'<'|'<='|'>'|'>='|'!'|'!=' 
;

EventDescriptor:
	'event' (eventName = ID) ' = ' (event = STRING)
;

Factor:
	'parameter' (factorName = ID) ' = ' (factorType = VariableType)? (factorType1 = ID)?
	'with' ('values' '{'(factorValue = Values)'}')?
	('properties' '{'((factorProperties += properties)*)'}')?
;

		
enum VariableType :
	QUALITATIVE | QUANTITATIVE | CONTINOUS | DISCRETE  | BINARY | NONBINARY
;

	
properties:
	pName= ID ':' pVal = Values ','?
;

Values:
	(fVal = ID)?
	( function = STRING)?
	( value = rangeValue)?
	( fvalue = factorLevelValue)?
	
	
;

terminal rangeValue	: INT ('.')? (INT)? ;		
terminal factorLevelValue	: rangeValue (',' rangeValue)* ;

Goals:
	'goal' '{'
	'object' 'of' 'study' ':' (objOfStudy = STRING)
	'purpose' ':' (purpose = STRING)
	'focus' ':' (focus = STRING)
	'view point' ':' (viewPoint = STRING)
	'context' ':' (context = STRING)
	'}'
;
Hypothesis :
	'hypotheses'
	'{'
	
	('mechanistic' 'hypotheses'  '{'
	(mechHypothesis += MechHypothesis)*
	'}')?
	
	('evidence' '{'
	(evidences += Evidence)*
	'}')?
	
	('coherence' 'model' '{'
	(coherenceLinks += CoherenceLink)*
	'}')?
	
	('relational' 'hypotheses' '{'
	(relHypothesis += RelationalQuery)*
	'}')?
	
	'}'
;

CoherenceLink:
	(coherence = Coherence) '('(hyp += ID)* ')' '('((evi += ID))*')'
;

MechHypothesis:
	(mName = ID) ':'(assoMech += TemporalPattern)*  (mechanisticHypothesis = ID)?
;

Evidence:
	(eName = ID) ':' (query += TemporalPattern)* 	
	'activation' 'weight' ':' (objOfStudy = rangeValue)
;	

TemporalPattern:
	Condition ((l2 += Links)?)* ((exp += Expression)?)* ((op1 += Temporal | op2 += Logical)?)* (l3 = Links)?
;	

Condition:
	condition = Event (lo= LinkOperators)? (e=Event)? (exp1=Expression)? (v=rangeValue)?
;

Event:
	Dispersed | Simultaneous
;

Simultaneous:
	'[' 
		sim1 = Re (log += Logical sim2 += Re)*
	']'
;

Dispersed:
	(disp += Re)+
;

Re:
	ID ('(' (ID ID)? ')')?
;
	
enum Expression:
	TRUE | FALSE
;

enum Links:
	is | occurs | to | in
;
	
enum Temporal:
	precedes | between | eventually | always | before | after | until | never | leads | absent | exists
;
	
enum Logical:
	and | or | not
;

enum Coherence:
	EXPLAIN | ANALOGOUS | DATA | CONTRADICT
;

RelationalQuery:
    Query1 | Query2 | Query3 
;

Query1:
     'if' (factor= ID)? (control=ID)? 'is' (x=rangeValue)? 
	('added')? ('removed')? ('in the range' start1=rangeValue 'to' end1=rangeValue)?
	 'then' (response= ID) 'is' (y=rangeValue)? ('in the range' start2=rangeValue 'to' end2=rangeValue)?
	 ; 

Query2:
	'compare' (function1=Function)? (response1=ID)? (factor1=ID)? 'and' 
	(function2=Function)? (response2=ID)? (factor2=ID)? 
;

enum Function:
	MIN | MAX | EXP | INVERSE | SIN | COS | TAN | FACTORIAL | LOG 
;

Query3:
     'if' ((factor1=ID)? (control1=ID)? 'is' ('at' 'level' (Level2=Levels))? (x2=rangeValue)? ('and')?)*
	
	'then' ((response1=ID) 'is' ('at' 'level' (Level4=Levels))? (x4=rangeValue)? ('and')?)*
	
	'where' ((level=Levels) 'for' (factor=ID)? (control=ID)? (response=ID)? 
	'is' 'in the range' (start1=rangeValue) 'to' (end1=rangeValue))*
;

enum Changes:
	CHANGED | INCREASED | DECREASED | CONSTANT
;			

enum Levels:
	HIGH | MEDIUM | LOW
;

Experiment :
	'experiment' (expName = ID)'{'

	'design' (expDesign = Design)

	'performance measure' 'is' (perfMeasure = PerformanceMeasure)
	'}'
;
	 
Design :	 	
	'{'
	('designType' designType = DesignType)?
	(('constraints' constraint = ID)?)*
	( iteration = Iteration)?
	('variables' variables = Variables)
	'}'
;	

enum DesignType:
	FULLFACTORIAL | FRACTIONALFACTORIAL | OTHERS 
;	
  
 Variables:
 	'{'
 	( independentVariables = IndependentVariables)
	( controlVariables = ControlVariables)?
	( dependentVariables = DependentVariables)
 	'}'
;
 
IndependentVariables :
	'independent' 'variables' '{' 
	( variables +=  FactorLevels)*
	'}'
;

ControlVariables:
	'control' 'variables' '{' ((controlName = ID) ':' 'type' (controlType = VariableType) 'with' 'values' '{'(controlValue = Values) )* '}'
;
	 
DependentVariables:
 	'dependent' 'variables' '{'
 	( responseName = Response)*
 	;
 
FactorLevels:
	((facName = ID) 'are' 'at' 'levels' ':'  (l= factorLevelValue)? ((l1 = Levels)
		'where' (l2 = Levels)
		'is' 'in the range' (start1=rangeValue) 'to' (end1=rangeValue)
	)?)
;
 	
Response:
 	(responseName = ID) ':' 'type' (responseType = ResponseType) 
 	'}'
;
 		 		
enum ResponseType :
	SIMPLE | COMPOSITE
;

Iteration:
	('number' 'of' 'iterations' ':' iterations = INT)
;	

PerformanceMeasure :
	'{'
		(expectedResponse = ID) '=' (er= rangeValue)(' +-')(std= rangeValue)
	'}'
;