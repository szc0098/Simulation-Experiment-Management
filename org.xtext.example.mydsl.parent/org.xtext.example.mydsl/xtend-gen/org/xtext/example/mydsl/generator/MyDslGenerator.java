/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Experiment;
import org.xtext.example.mydsl.myDsl.Factor;
import org.xtext.example.mydsl.myDsl.FactorLevels;
import org.xtext.example.mydsl.myDsl.GuardCondition;
import org.xtext.example.mydsl.myDsl.Mechanism;
import org.xtext.example.mydsl.myDsl.ModelSection;
import org.xtext.example.mydsl.myDsl.Values;
import org.xtext.example.mydsl.myDsl.properties;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("ishc.properties", this.toISHCProperties(
      IteratorExtensions.<ModelSection>head(Iterators.<ModelSection>filter(resource.getAllContents(), ModelSection.class))));
    fsa.generateFile("delivery.properties", this.toDeliveryProperties(
      IteratorExtensions.<ModelSection>head(Iterators.<ModelSection>filter(resource.getAllContents(), ModelSection.class)), IteratorExtensions.<Experiment>head(Iterators.<Experiment>filter(resource.getAllContents(), Experiment.class))));
    fsa.generateFile("KupfferCell.java", this.toKupfferCell(
      IteratorExtensions.<ModelSection>head(Iterators.<ModelSection>filter(resource.getAllContents(), ModelSection.class))));
    fsa.generateFile("Hepatocyte.java", this.toHepatocyte(
      IteratorExtensions.<ModelSection>head(Iterators.<ModelSection>filter(resource.getAllContents(), ModelSection.class))));
  }
  
  public CharSequence toISHCProperties(final ModelSection m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("# model parameters");
    _builder.newLine();
    _builder.append("stepsPerCycle = 1");
    _builder.newLine();
    _builder.append("# component parameters");
    _builder.newLine();
    {
      EList<Factor> _parameters = m.getParameters();
      for(final Factor factor : _parameters) {
        {
          boolean _notEquals = (!Objects.equal(factor, null));
          if (_notEquals) {
            {
              Values _factorValue = factor.getFactorValue();
              boolean _notEquals_1 = (!Objects.equal(_factorValue, null));
              if (_notEquals_1) {
                {
                  String _function = factor.getFactorValue().getFunction();
                  boolean _notEquals_2 = (!Objects.equal(_function, null));
                  if (_notEquals_2) {
                    String _factorName = factor.getFactorName();
                    _builder.append(_factorName);
                    _builder.append(" = ");
                    String _function_1 = factor.getFactorValue().getFunction();
                    _builder.append(_function_1);
                    _builder.newLineIfNotEmpty();
                  } else {
                    String _fVal = factor.getFactorValue().getFVal();
                    boolean _notEquals_3 = (!Objects.equal(_fVal, null));
                    if (_notEquals_3) {
                      String _factorName_1 = factor.getFactorName();
                      _builder.append(_factorName_1);
                      _builder.append(" = ");
                      String _fVal_1 = factor.getFactorValue().getFVal();
                      _builder.append(_fVal_1);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _fvalue = factor.getFactorValue().getFvalue();
                      boolean _notEquals_4 = (!Objects.equal(_fvalue, null));
                      if (_notEquals_4) {
                        String _factorName_2 = factor.getFactorName();
                        _builder.append(_factorName_2);
                        _builder.append(" = ");
                        String _fvalue_1 = factor.getFactorValue().getFvalue();
                        _builder.append(_fvalue_1);
                        _builder.newLineIfNotEmpty();
                      } else {
                        String _value = factor.getFactorValue().getValue();
                        boolean _notEquals_5 = (!Objects.equal(_value, null));
                        if (_notEquals_5) {
                          String _factorName_3 = factor.getFactorName();
                          _builder.append(_factorName_3);
                          _builder.append(" = ");
                          String _value_1 = factor.getFactorValue().getValue();
                          _builder.append(_value_1);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toDeliveryProperties(final ModelSection m, final Experiment e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("deliveryType = bolus");
    _builder.newLine();
    _builder.append("useContinualDoseFunction = false");
    _builder.newLine();
    _builder.append("repeatDose = true");
    _builder.newLine();
    _builder.append("infusionStopTime = 120.0");
    _builder.newLine();
    _builder.append("numDoses = 1");
    _builder.newLine();
    _builder.append("time.0 = 1.0");
    _builder.newLine();
    _builder.append("time.1 = 10.0");
    _builder.newLine();
    _builder.append("dose.0.alpha = 2000");
    _builder.newLine();
    _builder.append("dose.0.beta = -1");
    _builder.newLine();
    _builder.append("dose.0.gamma = -2");
    _builder.newLine();
    _builder.append("dose.0.numEntries = 7");
    _builder.newLine();
    int count1 = (-1);
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.newLine();
    {
      EList<Factor> _parameters = m.getParameters();
      for(final Factor factor : _parameters) {
        {
          boolean _notEquals = (!Objects.equal(factor, null));
          if (_notEquals) {
            _builder.append("#");
            int _plusPlus = count1++;
            _builder.append(_plusPlus);
            _builder.newLineIfNotEmpty();
            {
              EList<properties> _factorProperties = factor.getFactorProperties();
              boolean _notEquals_1 = (!Objects.equal(_factorProperties, null));
              if (_notEquals_1) {
                int count2 = 0;
                _builder.newLineIfNotEmpty();
                {
                  EList<properties> _factorProperties_1 = factor.getFactorProperties();
                  for(final properties p : _factorProperties_1) {
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.newLine();
                    {
                      boolean _not = (!((((((((p.getPName().equals("membraneCrossing") || p.getPName().equals("bileRatio")) || 
                        p.getPName().equals("core2Rim")) || p.getPName().equals("metProbStart")) || 
                        p.getPName().equals("metProbFinish")) || p.getPName().equals("metabolites")) || 
                        p.getPName().equals("inflammatory")) || p.getPName().equals("pDegrade")) || p.getPName().equals("transportOut")));
                      if (_not) {
                        _builder.append("\t");
                        _builder.newLine();
                        {
                          String _fVal = p.getPVal().getFVal();
                          boolean _notEquals_2 = (!Objects.equal(_fVal, null));
                          if (_notEquals_2) {
                            _builder.append("\t");
                            _builder.append("dose.0.solute.");
                            _builder.append(count1, "\t");
                            _builder.append(".");
                            String _pName = p.getPName();
                            _builder.append(_pName, "\t");
                            _builder.append(" = ");
                            String _fVal_1 = p.getPVal().getFVal();
                            _builder.append(_fVal_1, "\t");
                            _builder.newLineIfNotEmpty();
                          } else {
                            String _function = p.getPVal().getFunction();
                            boolean _notEquals_3 = (!Objects.equal(_function, null));
                            if (_notEquals_3) {
                              _builder.append("\t");
                              _builder.append("dose.0.solute.");
                              _builder.append(count1, "\t");
                              _builder.append(".");
                              String _pName_1 = p.getPName();
                              _builder.append(_pName_1, "\t");
                              _builder.append(" = ");
                              String _function_1 = p.getPVal().getFunction();
                              _builder.append(_function_1, "\t");
                              _builder.newLineIfNotEmpty();
                            } else {
                              String _value = p.getPVal().getValue();
                              boolean _notEquals_4 = (!Objects.equal(_value, null));
                              if (_notEquals_4) {
                                _builder.append("\t");
                                _builder.append("dose.0.solute.");
                                _builder.append(count1, "\t");
                                _builder.append(".");
                                String _pName_2 = p.getPName();
                                _builder.append(_pName_2, "\t");
                                _builder.append(" = ");
                                String _value_1 = p.getPVal().getValue();
                                _builder.append(_value_1, "\t");
                                _builder.newLineIfNotEmpty();
                              } else {
                                String _fvalue = p.getPVal().getFvalue();
                                boolean _notEquals_5 = (!Objects.equal(_fvalue, null));
                                if (_notEquals_5) {
                                  _builder.append("\t");
                                  _builder.append("dose.0.solute.");
                                  _builder.append(count1, "\t");
                                  _builder.append(".");
                                  String _pName_3 = p.getPName();
                                  _builder.append(_pName_3, "\t");
                                  _builder.append(" = ");
                                  String _fvalue_1 = p.getPVal().getFvalue();
                                  _builder.append(_fvalue_1, "\t");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      } else {
                        if ((((((p.getPName().equals("bileRatio") || p.getPName().equals("core2Rim")) || 
                          p.getPName().equals("metProbStart")) || p.getPName().equals("metProbFinish")) || 
                          p.getPName().equals("inflammatory")) || p.getPName().equals("pDegrade"))) {
                          _builder.append("\t");
                          _builder.append("dose.0.solute.");
                          _builder.append(count1, "\t");
                          _builder.append(".property.");
                          _builder.append(count2, "\t");
                          _builder.append(".key = ");
                          String _pName_4 = p.getPName();
                          _builder.append(_pName_4, "\t");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("dose.0.solute.");
                          _builder.append(count1, "\t");
                          _builder.append(".property.");
                          _builder.append(count2, "\t");
                          _builder.append(".type = real");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.newLine();
                          {
                            String _fVal_2 = p.getPVal().getFVal();
                            boolean _notEquals_6 = (!Objects.equal(_fVal_2, null));
                            if (_notEquals_6) {
                              _builder.append("\t");
                              _builder.append("dose.0.solute.");
                              _builder.append(count1, "\t");
                              _builder.append(".property.");
                              int _plusPlus_1 = count2++;
                              _builder.append(_plusPlus_1, "\t");
                              _builder.append(".val =  ");
                              String _fVal_3 = p.getPVal().getFVal();
                              _builder.append(_fVal_3, "\t");
                              _builder.newLineIfNotEmpty();
                            } else {
                              String _function_2 = p.getPVal().getFunction();
                              boolean _notEquals_7 = (!Objects.equal(_function_2, null));
                              if (_notEquals_7) {
                                _builder.append("\t");
                                _builder.append("dose.0.solute.");
                                _builder.append(count1, "\t");
                                _builder.append(".property.");
                                int _plusPlus_2 = count2++;
                                _builder.append(_plusPlus_2, "\t");
                                _builder.append(".val =  ");
                                String _function_3 = p.getPVal().getFunction();
                                _builder.append(_function_3, "\t");
                                _builder.newLineIfNotEmpty();
                              } else {
                                String _value_2 = p.getPVal().getValue();
                                boolean _notEquals_8 = (!Objects.equal(_value_2, null));
                                if (_notEquals_8) {
                                  _builder.append("\t");
                                  _builder.append("dose.0.solute.");
                                  _builder.append(count1, "\t");
                                  _builder.append(".property.");
                                  int _plusPlus_3 = count2++;
                                  _builder.append(_plusPlus_3, "\t");
                                  _builder.append(".val =  ");
                                  String _value_3 = p.getPVal().getValue();
                                  _builder.append(_value_3, "\t");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  String _fvalue_2 = p.getPVal().getFvalue();
                                  boolean _notEquals_9 = (!Objects.equal(_fvalue_2, null));
                                  if (_notEquals_9) {
                                    _builder.append("\t");
                                    _builder.append("dose.0.solute.");
                                    _builder.append(count1, "\t");
                                    _builder.append(".property.");
                                    int _plusPlus_4 = count2++;
                                    _builder.append(_plusPlus_4, "\t");
                                    _builder.append(".val =  ");
                                    String _fvalue_3 = p.getPVal().getFvalue();
                                    _builder.append(_fvalue_3, "\t");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("\t");
                          _builder.newLine();
                        } else {
                          if ((p.getPName().equals("membraneCrossing") || p.getPName().equals("transportOut"))) {
                            _builder.append("\t");
                            _builder.append("dose.0.solute.");
                            _builder.append(count1, "\t");
                            _builder.append(".property.");
                            _builder.append(count2, "\t");
                            _builder.append(".key = ");
                            String _pName_5 = p.getPName();
                            _builder.append(_pName_5, "\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("dose.0.solute.");
                            _builder.append(count1, "\t");
                            _builder.append(".property.");
                            _builder.append(count2, "\t");
                            _builder.append(".type = boolean");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.newLine();
                            {
                              String _fVal_4 = p.getPVal().getFVal();
                              boolean _notEquals_10 = (!Objects.equal(_fVal_4, null));
                              if (_notEquals_10) {
                                _builder.append("\t");
                                _builder.append("dose.0.solute.");
                                _builder.append(count1, "\t");
                                _builder.append(".property.");
                                int _plusPlus_5 = count2++;
                                _builder.append(_plusPlus_5, "\t");
                                _builder.append(".val =  ");
                                String _fVal_5 = p.getPVal().getFVal();
                                _builder.append(_fVal_5, "\t");
                                _builder.newLineIfNotEmpty();
                              } else {
                                String _function_4 = p.getPVal().getFunction();
                                boolean _notEquals_11 = (!Objects.equal(_function_4, null));
                                if (_notEquals_11) {
                                  _builder.append("\t");
                                  _builder.append("dose.0.solute.");
                                  _builder.append(count1, "\t");
                                  _builder.append(".property.");
                                  int _plusPlus_6 = count2++;
                                  _builder.append(_plusPlus_6, "\t");
                                  _builder.append(".val =  ");
                                  String _function_5 = p.getPVal().getFunction();
                                  _builder.append(_function_5, "\t");
                                  _builder.newLineIfNotEmpty();
                                } else {
                                  String _value_4 = p.getPVal().getValue();
                                  boolean _notEquals_12 = (!Objects.equal(_value_4, null));
                                  if (_notEquals_12) {
                                    _builder.append("\t");
                                    _builder.append("dose.0.solute.");
                                    _builder.append(count1, "\t");
                                    _builder.append(".property.");
                                    int _plusPlus_7 = count2++;
                                    _builder.append(_plusPlus_7, "\t");
                                    _builder.append(".val =  ");
                                    String _value_5 = p.getPVal().getValue();
                                    _builder.append(_value_5, "\t");
                                    _builder.newLineIfNotEmpty();
                                  } else {
                                    String _fvalue_4 = p.getPVal().getFvalue();
                                    boolean _notEquals_13 = (!Objects.equal(_fvalue_4, null));
                                    if (_notEquals_13) {
                                      _builder.append("\t");
                                      _builder.append("dose.0.solute.");
                                      _builder.append(count1, "\t");
                                      _builder.append(".property.");
                                      int _plusPlus_8 = count2++;
                                      _builder.append(_plusPlus_8, "\t");
                                      _builder.append(".val =  ");
                                      String _fvalue_5 = p.getPVal().getFvalue();
                                      _builder.append(_fvalue_5, "\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          } else {
                            boolean _equals = p.getPName().equals("metabolites");
                            if (_equals) {
                              _builder.newLine();
                              {
                                EList<FactorLevels> _variables = e.getExpDesign().getVariables().getIndependentVariables().getVariables();
                                boolean _notEquals_14 = (!Objects.equal(_variables, null));
                                if (_notEquals_14) {
                                  {
                                    EList<FactorLevels> _variables_1 = e.getExpDesign().getVariables().getIndependentVariables().getVariables();
                                    for(final FactorLevels factorLevels : _variables_1) {
                                      {
                                        boolean _equals_1 = factorLevels.getFacName().equals(p.getPVal().getFunction().split("-")[0]);
                                        if (_equals_1) {
                                          {
                                            String _l = factorLevels.getL();
                                            boolean _notEquals_15 = (!Objects.equal(_l, null));
                                            if (_notEquals_15) {
                                              _builder.append("\t");
                                              _builder.append("dose.0.solute.");
                                              _builder.append(count1, "\t");
                                              _builder.append(".property.");
                                              _builder.append(count2, "\t");
                                              _builder.append(".key = metabolites");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("\t");
                                              _builder.append("dose.0.solute.");
                                              _builder.append(count1, "\t");
                                              _builder.append(".property.");
                                              _builder.append(count2, "\t");
                                              _builder.append(".type = map");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("\t");
                                              _builder.append("dose.0.solute.");
                                              _builder.append(count1, "\t");
                                              _builder.append(".property.");
                                              int _plusPlus_9 = count2++;
                                              _builder.append(_plusPlus_9, "\t");
                                              _builder.append(".val =  ");
                                              String _get = p.getPVal().getFunction().split("-")[1];
                                              _builder.append(_get, "\t");
                                              _builder.append(" => <");
                                              String _l_1 = factorLevels.getL();
                                              _builder.append(_l_1, "\t");
                                              _builder.append(">");
                                              _builder.newLineIfNotEmpty();
                                            } else {
                                              if (((!Objects.equal(factorLevels.getStart1(), null)) && (!Objects.equal(factorLevels.getEnd1(), null)))) {
                                                _builder.append("\t");
                                                _builder.append("dose.0.solute.");
                                                _builder.append(count1, "\t");
                                                _builder.append(".property.");
                                                _builder.append(count2, "\t");
                                                _builder.append(".key = metabolites");
                                                _builder.newLineIfNotEmpty();
                                                _builder.append("\t");
                                                _builder.append("dose.0.solute.");
                                                _builder.append(count1, "\t");
                                                _builder.append(".property.");
                                                _builder.append(count2, "\t");
                                                _builder.append(".type = map");
                                                _builder.newLineIfNotEmpty();
                                                _builder.append("\t");
                                                _builder.append("dose.0.solute.");
                                                _builder.append(count1, "\t");
                                                _builder.append(".property.");
                                                int _plusPlus_10 = count2++;
                                                _builder.append(_plusPlus_10, "\t");
                                                _builder.append(".val =  ");
                                                String _get_1 = p.getPVal().getFunction().split("-")[1];
                                                _builder.append(_get_1, "\t");
                                                _builder.append(" => <");
                                                String _start1 = factorLevels.getStart1();
                                                _builder.append(_start1, "\t");
                                                _builder.append(",");
                                                String _end1 = factorLevels.getEnd1();
                                                _builder.append(_end1, "\t");
                                                _builder.append(">");
                                                _builder.newLineIfNotEmpty();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("\t\t\t\t\t\t");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence toKupfferCell(final ModelSection m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("package ishc.model;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.lang.Math;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import sim.field.grid.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import sim.util.Bag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class KupfferCell extends Cell {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger( ISHC.class );");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public KupfferCell(Culture p, ec.util.MersenneTwisterFast random, int x, int y) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("super(p,random);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("setLoc(x,y);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("actionShuffler.clear();         ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("actionShuffler.add(new Runnable() { public void run() { handleInflammation(); } });");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("actionShuffler.add(new Runnable() { public void run() { handleDegradation();}} );");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("BolusEntry cytokineBolusEntry = null;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void handleInflammation()");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("int numInflammatoryStimuli = 0;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("int numCytokines = 0;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for(Object o : solutes)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Solute s = (Solute) o;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(s.hasProperty(\"inflammatory\") && ((Boolean)s.getProperty(\"inflammatory\")))");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("numInflammatoryStimuli++;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(s.type.equals(\"Cytokine\"))");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("numCytokines++;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("} ");
    _builder.newLine();
    {
      EList<Mechanism> _mechanisms = m.getMechanisms();
      for(final Mechanism mech : _mechanisms) {
        _builder.newLine();
        {
          if (((!Objects.equal(mech.getLHS().getAgent(), null)) && (!Objects.equal(mech.getLHS().getAgent1(), null)))) {
            _builder.newLine();
            {
              if ((mech.getLHS().getAgent().equalsIgnoreCase("Kupffercells") || mech.getLHS().getAgent().equalsIgnoreCase("Kupffercell"))) {
                _builder.append("\t\t           \t\t ");
                _builder.append("if(s.type.equals(\"");
                String _agent1 = mech.getLHS().getAgent1();
                _builder.append(_agent1, "\t\t           \t\t ");
                _builder.append("\"){");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                {
                  GuardCondition _condition = mech.getCondition();
                  boolean _notEquals = (!Objects.equal(_condition, null));
                  if (_notEquals) {
                    _builder.append("if(\"");
                    String _condition1 = mech.getCondition().getCondition1();
                    _builder.append(_condition1);
                    _builder.append("\" ");
                    String _link = mech.getCondition().getLink();
                    _builder.append(_link);
                    _builder.append(" \"");
                    String _condition2 = mech.getCondition().getCondition2();
                    _builder.append(_condition2);
                    _builder.append("\")");
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  String _agent1_1 = mech.getRHS().getAgent1();
                  boolean _notEquals_1 = (!Objects.equal(_agent1_1, null));
                  if (_notEquals_1) {
                    {
                      if ((mech.getRHS().getAgent1().equalsIgnoreCase("Cytokines") || mech.getRHS().getAgent1().equalsIgnoreCase("Cytokine"))) {
                        _builder.append("numCytokines++;\t  ");
                        _builder.newLine();
                      } else {
                        if ((mech.getRHS().getAgent1().equalsIgnoreCase("Inflammation") || mech.getRHS().getAgent1().equalsIgnoreCase("InflammatoryAgent"))) {
                          _builder.append("numInflammatoryStimuli++;");
                          _builder.newLine();
                        } else {
                          if ((mech.getRHS().getAgent1().equalsIgnoreCase("No Inflammation") || mech.getRHS().getAgent1().equalsIgnoreCase("NoInflammation"))) {
                            _builder.append("numInflammatoryStimuli--;");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                {
                  String _agent = mech.getRHS().getAgent();
                  boolean _notEquals_2 = (!Objects.equal(_agent, null));
                  if (_notEquals_2) {
                    {
                      if ((mech.getRHS().getAgent().equals("Cytokines") || mech.getRHS().getAgent().equals("Cytokine"))) {
                        _builder.append(" ");
                        _builder.append("numCytokines++;\t  ");
                        _builder.newLine();
                      } else {
                        if ((mech.getRHS().getAgent().equalsIgnoreCase("Inflammation") || mech.getRHS().getAgent().equalsIgnoreCase("InflammatoryAgent"))) {
                          _builder.append("numInflammatoryStimuli++;");
                          _builder.newLine();
                        } else {
                          if ((mech.getRHS().getAgent().equalsIgnoreCase("No Inflammation") || mech.getRHS().getAgent().equalsIgnoreCase("NoInflammation"))) {
                            _builder.append("numInflammatoryStimuli--;");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("  \t");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.newLine();
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t            \t     ");
    _builder.newLine();
    _builder.append("\t            \t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(numCytokines >= parent.cytokineThreshold)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(numInflammatoryStimuli >= parent.inflammatoryStimulusThreshold)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{               ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("double probability = 1.0 - Math.exp(-1*(numInflammatoryStimuli - parent.inflammatoryStimulusThreshold) / parent.exponentialFactor);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("double draw = rng.nextDouble();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(draw <= probability)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("addCytokine();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public Solute addCytokine()");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(cytokineBolusEntry == null)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("sim.util.Bag bolusEntries = ((BolusDose) parent.model.delivery.doses.objs[0]).solution;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (int i = 0; i < bolusEntries.numObjs; i++) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("BolusEntry be = (BolusEntry) bolusEntries.objs[i];");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if (be.tag.equals(\"Cytokine\")) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("cytokineBolusEntry = be;");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("//Create the Cytokine");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Solute cytokine = new Solute(cytokineBolusEntry);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("cytokine.setProperties(cytokineBolusEntry.props);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("//Add the Cytokine");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.solutes.add(cytokine);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.cellSpace.setObjectLocation(cytokine, myX, myY);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("solutes.add(cytokine);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return cytokine;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence toHepatocyte(final ModelSection m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("package ishc.model;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import sim.util.Bag;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import sim.util.Double2D;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Hepatocyte extends Cell implements CellInfo, EIInfo, ELInfo, MetabolismInfo {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger( ISHC.class );");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("HashMap<String, Double> metProbMap = new LinkedHashMap<String,Double>();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("HashMap<String, HashMap<String,Double>> productionMap = new LinkedHashMap<String,HashMap<String,Double>>();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("int numEnzymesAtInit = -Integer.MAX_VALUE;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public Hepatocyte(Culture p, ec.util.MersenneTwisterFast random, int x, int y) {");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("super(p, random);");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("setLoc(x,y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (parent.ei_rate > 0.0) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("actionShuffler.add(new EIHandler((CellInfo) this, (BindingInfo) this, (EIInfo) this, log));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (parent.el_rate > 0.0) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("actionShuffler.add(new ELHandler((CellInfo) this, (BindingInfo) this, (ELInfo) this, log));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (parent.useDDI) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("actionShuffler.add(new DDIHandler((BindingInfo) this, rng, log, parent.pReplace));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}       ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (parent.drRate > 0) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("actionShuffler.add(new Runnable() { public void run() { handleDownRegulation(); } });");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("float ENZYME_INIT_FACTOR = 3.0f;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void init() {    ");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("int min = StrictMath.round(parent.bindmin);");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("int max = StrictMath.round(parent.bindmax);");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("numEnzymesAtInit = rng.nextInt(max-min) + min;");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("} catch (IllegalArgumentException e) {");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("numEnzymesAtInit = min;");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("for (int bNdx=0 ; bNdx<numEnzymesAtInit; bNdx++) ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("binders.add(new Enzyme());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("for (Object o : ((BolusDose)parent.model.delivery.doses.objs[0]).solution) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("BolusEntry be = (BolusEntry) o;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (be.bindable) {");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("double mps = (Double)be.props.get(\"metProbStart\");");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("double mpf = (Double)be.props.get(\"metProbFinish\");          ");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("double mp = mps + (mpf-mps)*0.5;");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("metProbMap.put(be.tag, mp);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("HashMap<String,Double2D> mprodmap = (HashMap<String,Double2D>) be.props.get(\"metabolites\");");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("HashMap<String,Double> metsMap = new LinkedHashMap<>();");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("for (java.util.Map.Entry<String,Double2D> me : mprodmap.entrySet()) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("Double2D d2d = me.getValue();");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("double prmin = d2d.x;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("double prmax = d2d.y;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("double prodRate = prmin + (prmax-prmin)*0.5;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("metsMap.put(me.getKey(), prodRate);");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("productionMap.put(be.tag,metsMap);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (!metProbMap.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("actionShuffler.add(new MetabolismHandler((BindingInfo) this, (MetabolismInfo) this, rng, log));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public java.util.ArrayList<ishc.util.MyInt> elimQueue = null;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("int rate_increment = parent.drRate;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void handleDownRegulation()");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("{      ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("boolean thereIsACytokine = false;");
    _builder.newLine();
    {
      EList<Mechanism> _mechanisms = m.getMechanisms();
      for(final Mechanism mech : _mechanisms) {
        {
          if (((!Objects.equal(mech.getLHS().getAgent(), null)) && (!Objects.equal(mech.getLHS().getAgent1(), null)))) {
            {
              if ((mech.getLHS().getAgent1().equalsIgnoreCase("Hepatocyte") || mech.getLHS().getAgent().equalsIgnoreCase("Hepatocyte"))) {
                {
                  if (((!Objects.equal(mech.getRHS().getAgent1(), null)) && (mech.getRHS().getAgent1().equalsIgnoreCase("Cytokines") || mech.getRHS().getAgent1().equalsIgnoreCase("Cytokine")))) {
                    {
                      GuardCondition _condition = mech.getCondition();
                      boolean _notEquals = (!Objects.equal(_condition, null));
                      if (_notEquals) {
                        _builder.append("if(\"");
                        String _condition1 = mech.getCondition().getCondition1();
                        _builder.append(_condition1);
                        _builder.append("\" ");
                        String _link = mech.getCondition().getLink();
                        _builder.append(_link);
                        _builder.append(" \"");
                        String _condition2 = mech.getCondition().getCondition2();
                        _builder.append(_condition2);
                        _builder.append("\"){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("thereIsACytokine = true;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  } else {
                    _builder.append("for(Solute s : solutes)");
                    _builder.newLine();
                    _builder.append("{");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("if(s.type.equalsIgnoreCase(\"Cytokine\"))");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("{");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("thereIsACytokine = true;");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("break;");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                {
                  if (((!Objects.equal(mech.getRHS().getAgent1(), null)) && (mech.getRHS().getAgent1().equalsIgnoreCase("Enzymes") || mech.getRHS().getAgent1().equalsIgnoreCase("Enzyme")))) {
                    {
                      GuardCondition _condition_1 = mech.getCondition();
                      boolean _notEquals_1 = (!Objects.equal(_condition_1, null));
                      if (_notEquals_1) {
                        _builder.append("if(\"");
                        String _condition1_1 = mech.getCondition().getCondition1();
                        _builder.append(_condition1_1);
                        _builder.append("\" ");
                        String _link_1 = mech.getCondition().getLink();
                        _builder.append(_link_1);
                        _builder.append(" \"");
                        String _condition2_1 = mech.getCondition().getCondition2();
                        _builder.append(_condition2_1);
                        _builder.append("\"){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t         \t\t\t");
                        _builder.append("binders.add(new Enzyme());");
                        _builder.newLine();
                        _builder.append("\t\t            \t\t");
                        _builder.append("return;");
                        _builder.newLine();
                        _builder.append("\t\t            \t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  } else {
                    _builder.append(" ");
                    _builder.append("if(binders.size() < numEnzymesAtInit && elimQueue != null && elimQueue.size() == 0 && !thereIsACytokine)");
                    _builder.newLine();
                    _builder.append("{            ");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("if(rng.nextDouble() < parent.drReplenish)");
                    _builder.newLine();
                    _builder.append("        ");
                    _builder.append("binders.add(new Enzyme());");
                    _builder.newLine();
                    _builder.append("    ");
                    _builder.append("return;");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("if(elimQueue != null && elimQueue.size() > 0)");
                _builder.newLine();
                _builder.append("{");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("int num_to_elim = (int) elimQueue.remove(0).val;");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("java.util.ArrayList<Binder> to_be_removed = new java.util.ArrayList<Binder>();");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("for(Binder b : binders)");
                _builder.newLine();
                _builder.append("    ");
                _builder.append("{");
                _builder.newLine();
                _builder.append("        ");
                _builder.append("if(num_to_elim <= 0)");
                _builder.newLine();
                _builder.append("            ");
                _builder.append("break;");
                _builder.newLine();
                _builder.append("        ");
                _builder.append("if(!bound.containsKey(b)) //if unbound");
                _builder.newLine();
                _builder.append("            ");
                _builder.append("to_be_removed.add(b);");
                _builder.newLine();
                _builder.append("        ");
                _builder.append("if(to_be_removed.size() >= num_to_elim)");
                _builder.newLine();
                _builder.append("            ");
                _builder.append("break;");
                _builder.newLine();
                {
                  boolean _contains = mech.getRHS().getAgent1().contains("Removed");
                  if (_contains) {
                    _builder.append("        ");
                    _builder.append("if(!bound.containsKey(\"");
                    String _substring = mech.getRHS().getAgent1().substring(mech.getRHS().getAgent1().indexOf("Removed"));
                    _builder.append(_substring, "        ");
                    _builder.append("\")) //if unbound");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("    ");
                    _builder.append("to_be_removed.add(b);");
                    _builder.newLine();
                  }
                }
                {
                  boolean _contains_1 = mech.getRHS().getAgent1().contains("Added");
                  if (_contains_1) {
                    _builder.append("        ");
                    _builder.append("if(!bound.containsKey(\"");
                    String _substring_1 = mech.getRHS().getAgent1().substring(mech.getRHS().getAgent1().indexOf("Added"));
                    _builder.append(_substring_1, "        ");
                    _builder.append(")\") //if unbound");
                    _builder.newLineIfNotEmpty();
                    _builder.append("        ");
                    _builder.append("    ");
                    _builder.append("to_be_removed.remove(b);");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for(Binder b : to_be_removed)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("binders.remove(b);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("Binder firstUnbound = null;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for(Binder b : binders)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(!bound.containsKey(b))");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("firstUnbound = b;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if(firstUnbound == null)");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return;                ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for(Solute s : solutes)");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if(s.type.equalsIgnoreCase(\"Cytokine\"))");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("if(rng.nextDouble() < parent.drRemove)");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("//Add to the queue to be removed, then return");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if(elimQueue == null)");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("elimQueue = new java.util.ArrayList<ishc.util.MyInt>();");
    _builder.newLine();
    _builder.append("\t                                        ");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("for(int i = 0; i < rate_increment - 1; i++)");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("elimQueue.add(new ishc.util.MyInt(0));");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("elimQueue.add(new ishc.util.MyInt(1));");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//Implementations for CellInfo");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public double getResources() {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return parent.resources;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public int getBindmax() {return parent.bindmax;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public int getNumEnzymesAtInit() {return numEnzymesAtInit; }");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//Implementations for EIInfo");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public int getEIThresh() {return parent.ei_thresh;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public double getEIRate() {return parent.ei_rate;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public double getEIResponse() {return parent.ei_response_factor;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//Implementations for ELInfo");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public int getELThresh() {return parent.el_thresh;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public double getELRate() {return parent.el_rate;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public double getELResponse() {return parent.el_response_factor;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//Implementations for MetabolismInfo");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public HashMap<String, Double> getMetProbMap() {return metProbMap;}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public HashMap<String, HashMap<String,Double>> getProductionMap() {return productionMap; }");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public Bag getBolusEntries() {return ((BolusDose) parent.model.delivery.doses.objs[0]).solution; }");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void removeSolute(Solute s) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("solutes.remove(s);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.solutes.remove(s);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.cellSpace.remove(s);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public void addSolute(Solute s) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.solutes.add(s);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("parent.cellSpace.setObjectLocation(s, myX, myY);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("solutes.add(s);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
